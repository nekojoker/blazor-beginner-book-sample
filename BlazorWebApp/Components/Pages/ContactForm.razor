@page "/contact"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations;

<PageTitle>お問い合わせフォーム</PageTitle>
<h3>お問い合わせフォーム</h3>

<EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" FormName="ContactForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label" for="input1">名前</label>
        <InputText class="form-control" @bind-Value="@Model.Name" id="input1" />
    </div>
    <div class="mb-3">
        <label class="form-label" for="input2">メールアドレス</label>
        <InputText class="form-control" @bind-Value="@Model.Email" id="input2" type="email" />
    </div>
    <div class="mb-3">
        <label class="form-label" for="input3">内容</label>
        <InputTextArea class="form-control" @bind-Value="@Model.Content" id="input3" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@formInvalid">送信</button>
</EditForm>

<p style="font-size: 20px;margin-top: 20px;">
    @resultMessage
</p>

@if (!string.IsNullOrEmpty(resultMessage))
{
    <p>名前:@Model.Name</p>
    <p>メールアドレス:@Model.Email</p>
    <p>内容:@Model.Content</p>
}

@code {
    [SupplyParameterFromForm]
    private ContactFormModel Model { get; set; } = new();
    private string resultMessage = "";

    private void OnValidSubmit()
        => resultMessage = "お問い合わせありがとうございました！";

    public class ContactFormModel
    {
        [Required(ErrorMessage = "名前は入力必須です。")]
        [MinLength(3, ErrorMessage = "名前は3文字以上入力してください。")]
        [MaxLength(10, ErrorMessage = "名前は10文字以下にしてください。")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "メールアドレスは入力必須です。")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "内容は入力必須です。")]
        public string Content { get; set; } = "";
    }

    private bool formInvalid = true;
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);
        editContext.OnFieldChanged += OnFieldChanged;
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e)
        => formInvalid = !editContext!.Validate();
}